import 'dart:convert';import 'dart:math';import 'dart:typed_data';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:shared_preferences/shared_preferences.dart';import 'package:vendor/firebase/model/pricing_model.dart';import 'package:vendor/firebase/model/profile_model.dart';import 'package:vendor/utility/app_const.dart';import 'package:vendor/view/main_pages.dart';import 'package:vendor/view_controller/app_snackbar.dart';import '../../view/auth/congratulation.dart';class FirebaseAuthController{  static final _firestore  = FirebaseFirestore.instance;  static final _auth  = FirebaseAuth.instance;  ///======= vendor signup ========//  static  Future<bool> vendorRegister(      {    required BuildContext context,    required Map<String, dynamic> data  }  ) async {    try {      SharedPreferences _pref = await SharedPreferences.getInstance();      UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(        email: data["email"],        password: data["password"],      );      // Save user's data in vendor table      await FirebaseFirestore.instance.collection('vendor').add(data).then((value){        AppSnackBar.appSnackBar("Registration has been Success", Colors.green, context);        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=> Congratulation(), settings: RouteSettings(name: "/success")), (route) => false);      });      return true;      // Navigate to another screen or perform additional actions      // For example, you can use Navigator.pushReplacement() to go to the home screen.    } catch (e) {      if(e.toString().contains("email-already-in-use")){        AppSnackBar.appSnackBar("Email already in use. Please user deficient email address", Colors.red, context);      }else{        AppSnackBar.appSnackBar("Something went wrong. Try again.", Colors.red, context);      }      print('Error during registration: $e');      return false;      // Handle registration errors (e.g., email already in use, weak password, etc.)    }  }  ///======= vendor login ========//  static   Future<bool> signInWithEmailAndPassword({required BuildContext context, required String email, required String password}) async {    try {      SharedPreferences _pref = await SharedPreferences.getInstance();      UserCredential userCredential = await FirebaseAuth.instance.signInWithEmailAndPassword(        email: email,        password: password,      );      var user_Data = await FirebaseFirestore.instance.collection('vendor').get();      if(user_Data.docs.length>0){        for(var i=0; i<user_Data.docs.length; i++){          if(user_Data.docs[i].data()["email"]==email && user_Data.docs[i].data()["role"]== "vendor"){            //check account is acctive or not            if(user_Data.docs[i].data()["admin_approve"] == true){              AppSnackBar.appSnackBar("Login has been Success", Colors.green, context);              Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=> MainPage(), settings: RouteSettings(name: "/dashboard")), (route) => false);              return false;            }else{              AppSnackBar.appSnackBar("Your account is not active. Please contact with admin.", Colors.red, context);              return false;            }          }        }      }      return true;    } catch (e) {      print('Error during login: $e');      return false;      // Handle login errors (e.g., invalid email/password, user not found, etc.)    }  }  static Future<String?> getUserId()async{      SharedPreferences _pref = await SharedPreferences.getInstance();      return _pref.getString("user_id");  }  //get vendor information  static Future<ProfileModel> getVendorInfo()async {    SharedPreferences _pref = await SharedPreferences.getInstance();    var user_id = _pref.getString("user_id");    var user_Data = await FirebaseFirestore.instance.collection('vendor').doc(        user_id).collection("profile").doc("profile").get();    print("user data: ${jsonEncode(user_Data.data())}"); //user data: {"email":"test@gmail","password":"123456","phone":"123456","name    return ProfileModel.fromJson(jsonDecode(jsonEncode(user_Data.data()!)));  }  // vendor profiles    static Stream<QuerySnapshot<Map<String, dynamic>>> getVendorProfile(){        return  _firestore.collection("vendor").snapshots();    }    //get vendor profile    static Stream<QuerySnapshot<Map<String, dynamic>>> getVendorProfileData(){      return _firestore.collection("vendor").snapshots();    }    //email verification    static Future<void> emailVerification({required String docId, required BuildContext context}) async {      try{        _firestore.collection("vendor").doc(docId).update({"verify_email": true}).then((value) {          print("Email has been verified.");          AppSnackBar.appSnackBar("Email has been verified", Colors.green, context);          Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => const Congratulation(text: "Your email is verified. Now you can store and manage your vehicles.",)), (route) => false);        });      }catch(e){        print("error: $e");      }    }    //account verify and id prove    static Future<void> accountVefiry({required String docId, required Uint8List idProveUrl, required Uint8List businessProveUrl, required BuildContext context})async{        try{          //convert image to url          var idImage;          var businessLicens;          await AppConst.uploadImageToFirebaseStorage(idProveUrl, "vendor/id_prove").then((value) {            idImage = value;          });          await AppConst.uploadImageToFirebaseStorage(businessProveUrl, "vendor/business_license").then((value){            businessLicens = value;          });          _firestore.collection("vendor").doc(docId).update({            "id_prove" : "$idImage",            "business_license" : "$businessLicens",            "verify_account" : true,            "admin_approve" : "Pending"          }).then((value) {            print("Account has been verified.");            AppSnackBar.appSnackBar("Your account verification under Reviewing.", Colors.green, context);            Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=> const Congratulation(text: "Thank you for uploading your documents. We are reviewing your documents.",)), (route) => false);          });        }catch(e){          print("error: $e");        }    }}