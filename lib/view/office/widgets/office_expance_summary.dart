import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:pie_chart/pie_chart.dart';import 'package:syncfusion_flutter_charts/charts.dart';import 'package:vendor/model/office_expanse/office_expanse.dart';import 'package:vendor/utility/app_color.dart';import 'package:vendor/view_controller/loadingWidget.dart';import 'package:vendor/view_controller/richText.dart';class OfficeExpanseSummery extends StatelessWidget {  const OfficeExpanseSummery({    super.key,     this.expanseList,    required this.isLoading  });  final bool isLoading;  final   List<ExpanseList>? expanseList;  @override  Widget build(BuildContext context) {    var totalCost = 0.00;    List<OfficeExpanseModel> dataSource = [];    if(expanseList!.isNotEmpty){      for(var i in expanseList!){        totalCost += double.parse("${i.amount}");        // Parse the date string into a DateTime object        DateTime dateTime = DateTime.parse("${i.date!}");        // Format the DateTime object to get the month abbreviation        String month = DateFormat('MMM').format(dateTime);        dataSource.add(OfficeExpanseModel(month, double.parse("${i.amount}")));      }    }    return Expanded(      child: Container(        height: 400,        padding: EdgeInsets.all(10),        decoration: BoxDecoration(            color: AppColors.white,            borderRadius: BorderRadius.circular(10),            boxShadow: [              BoxShadow(                  color: Colors.grey.shade300,                  spreadRadius: 2, blurRadius: 3,                  offset: Offset(0,2)              )            ]        ),        child:isLoading ? Center(child: CircularProgressIndicator(color: AppColors.green,),) : expanseList!.isEmpty            ? Center(child: Text("No date found"),)            : Column(          children: [            Text("Short Summary",              style: TextStyle(                fontSize: 15,                fontWeight: FontWeight.w600,              ),            ),            SfCartesianChart(              primaryXAxis: CategoryAxis(),              series: <ChartSeries>[                StackedBarSeries<OfficeExpanseModel, String>(                  dataSource: dataSource,                  xValueMapper: (OfficeExpanseModel data, _) => data.year,                  yValueMapper: (OfficeExpanseModel data, _) => data.sales,                  // Stacked values                  initialSelectedDataIndexes: [0], // Initial selected index                ),              ],            ),            SizedBox(height: 20,),            Row(              children: [                Text("Total Cost :",                  style: TextStyle(                    fontSize: 13,                    fontWeight: FontWeight.w600,                  ),                ),                SizedBox(width: 10,),                Text("\$${totalCost}",                  style: TextStyle(                    fontSize: 17,                    fontWeight: FontWeight.w600,                    color: Colors.red                  ),                ),              ],            ),          ],        ),      ),    );  }}class OfficeExpanseModel {  OfficeExpanseModel(this.year, this.sales);  final String year;  final double sales;}